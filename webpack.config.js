// Встроенная функция вебпака. Необходима для прописывания пути к файлам
const path = require('path')
// Подключение плагина работы с html
const htmlWebpackPlugin = require('html-webpack-plugin')

// Тут мы указываем, что мы собираемся что-то экспортировать
module.exports = {
	// Указание на то, в каком режиме будет работать вебпак
	mode: 'production',

	// Точка входа.
	// Ключ может иметь любое название,
	// но желательно, чтобы в output ключ совпадал.
	entry: {
		// Используем штуку из 1 строки
		filename: path.resolve(__dirname, 'src/index.js'),
	},

	// Указываем, куда мы будем выводить весь проект
	// и как будет называться итоговый файл
	output: {
		// Используем штуку из 1 строки
		path: path.resolve(__dirname, 'dist'),
		// Тут указание на то, что файл js будет назван по своему имени.
		// [contenthash] - указание на то, что каждый созданный через
		// output итоговый файл js будет уникальным, к его имени добавится
		// уникальный хэш и он не будет сохранён в кэш, в результате чего
		// можно избежать ошибок с 
		filename: '[id][contenthash].js',
		// Свойство, указывающее webpack'у на то, что всё, что он обрабатывает
		// из папки assets, он должен поместить в dist с тем же именем,
		// и названием расширения файла.
		assetModuleFilename: '[name][ext]',
		// Очищает неиспользующиеся и старые файлы в папке dist
		// при очередной сборке проекта.
		clean: true
	},
	
	// Оптимизация изображений
	performance: {
		// Отключение подсказок
		hints: false,
		// Максимальный размер для изображения, указывается в байтах.
		// Здесь 512КБ.
		maxAssetSize: 512000,
		// "Ленивая подгрузка".
		// Если изображение будет превышать указанный в этом свойстве размер,
		// то оно будет подгружаться после того, как будет загружен
		// весь остальной контент. Указывается в байтах. Здесь 512КБ.
		maxEntrypointSize: 512000
	},

	// Настройка для локального сервера вебпака.
	// Установка: npm install -D webpack-dev-server
	// Запуск сервера: npx webpack serve
	// Выйти из сервера: нажать в консоли Ctrl+C
	devServer: {
		//Указываем порт для подключения, любой.
		port: 9000,
		// Файлы для отображения на сервере будут дополнительно сжиматься
		compress: true,
		// Автоматическая перезагрузка сервера при изменениях
		hot: true,
		// Какие файлы будем отображать
		static: {
			// Объединение пути к проекту (__dirname) и выбор нужной папки
			directory: path.join(__dirname, 'dist')
		}
	},

	// Правила подключения расширений и модулей.
	// Для работы со стилями нужно через консоль установить нужные лоадеры,
	// указанные в свойстве use ниже.
	// webpack install name-of-loader
	module: {
		rules: [
			{
				// Тут подключаются стили.
				test: /\.(css|scss)$/,
				// Что использовать при подключении того, что нам нужно строкой выше
				// Использование происходит справа налево, из конца в начало.
				// Такая настройка работает и с CSS, и с SCSS(SASS)
				use: ['style-loader', 'css-loader', 'sass-loader']
			},

			{
				// Подключение возможности работы с изображениями.
				// в test писать расширения файлов.
				// буква i в конце нужна для игнорирования регистра расширения,
				// что будет приводить названия расширений к нижнему регистру.
				test: /\.(png|svg|jpg|jpeg|gif)$/i,
				// Webpack умеет работать с изображениями, если ему
				// указать вместо use свойство type с этим значением,
				// тем самым указывая Webpack'у то, что описанные в test
				// расширения попадают под определение asset/resourse
				type: 'asset/resource'
			},

			// Загрузка кастомных шрифтов
			// Необходима установка url-loader
			// npm install url-loader
			{
				test: /\.ttf$/,
				use: ['url-loader']
			}
		]
	},
	// Подключение плагинов.
	// Реализуется через массив с перечислением плагинов и передачей
	// свойств к ним.
	plugins: [
		new htmlWebpackPlugin({
			// Кастомное название html-страницы, во вкладке браузера
			title: 'New Webpack Project',
			// Указание на то, как должен называться итоговый файл в dist.
			filename: 'index.html',
			// Указание на то, какой файл является шаблоном, 
			// т.е. какой файл обрабатывается и затем будет передан в dist
			// под именем, указанным в filename.
			template: 'src/index.html'
		})
	]
}